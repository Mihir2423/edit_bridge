generator client {
 provider = "prisma-client-js"
}

datasource db {
 provider = "postgresql"
 url      = env("DATABASE_URL")
}

model User {
 id               String            @id @default(cuid())
 name             String?
 email            String            @unique
 emailVerified    DateTime?
 slug             String?           @unique
 image            String?
 password         String?
 role             String?
 bio              String?
 userType         String?
 salt             String?
 socials          String[]
 createdAt        DateTime          @default(now())
 updatedAt        DateTime          @updatedAt
 city             String?
 country          String?
 accounts         Account[]
 previousWork     PreviousWork[]
 resetToken       ResetToken?
 sessions         Session[]
 verifyEmailToken VerifyEmailToken?
 request_send     Request[]         @relation("RequestSender")
 request_received Request[]         @relation("RequestReceiver")
 creators         Team[]            @relation("UserCreators")
 editors          Team[]            @relation("UserEditors")
 Video            Video[]

 @@map("users")
}

model Team {
 id        String   @id @default(cuid())
 creator   User     @relation("UserCreators", fields: [creatorId], references: [id])
 creatorId String
 editor    User     @relation("UserEditors", fields: [editorId], references: [id])
 editorId  String
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt

 @@map("team")
}

model Request {
 id         String   @id @default(cuid())
 type       String // 'hire' or 'apply'
 status     String   @default("pending") // 'pending', 'accepted', 'rejected'
 createdAt  DateTime @default(now())
 updatedAt  DateTime @updatedAt
 sender     User     @relation("RequestSender", fields: [senderId], references: [id])
 senderId   String
 receiver   User     @relation("RequestReceiver", fields: [receiverId], references: [id])
 receiverId String

 @@map("requests")
}

model Account {
 userId            String
 type              String
 provider          String
 providerAccountId String
 refresh_token     String?
 access_token      String?
 expires_at        Int?
 token_type        String?
 scope             String?
 id_token          String?
 session_state     String?
 createdAt         DateTime @default(now())
 updatedAt         DateTime @updatedAt
 user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

 @@id([provider, providerAccountId])
 @@map("accounts")
}

model Session {
 sessionToken String   @unique
 userId       String
 expires      DateTime
 createdAt    DateTime @default(now())
 updatedAt    DateTime @updatedAt
 user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

 @@map("sessions")
}

model PreviousWork {
 id          Int    @id @default(autoincrement())
 userId      String
 title       String
 description String
 url         String
 platform    String
 user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

 @@map("previous_works")
}

model VerificationToken {
 identifier String
 token      String
 expires    DateTime

 @@id([identifier, token])
 @@map("verification_tokens")
}

model MagicLink {
 id             Int       @id @default(autoincrement())
 email          String    @unique
 token          String?
 tokenExpiresAt DateTime?

 @@map("magic_links")
}

model ResetToken {
 id             Int       @id @default(autoincrement())
 userId         String    @unique
 token          String?
 tokenExpiresAt DateTime?
 user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

 @@map("reset_tokens")
}

model VerifyEmailToken {
 id             Int       @id @default(autoincrement())
 userId         String    @unique
 token          String?
 tokenExpiresAt DateTime?
 user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

 @@map("verify_email_tokens")
}

model Video {
 id          String   @id @default(cuid())
 title       String
 description String
 thumbnail   String
 video       String
 userId      String
 user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 createdAt   DateTime @default(now())
 updatedAt   DateTime @updatedAt
}
